{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Arabic Text Animator","text":"<p>Welcome to Arabic Text Animator, a Python library for creating beautiful Arabic text writing animations.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83c\udfa8 Create smooth writing animations for Arabic text</li> <li>\ud83d\udd20 Support for RTL text rendering</li> <li>\ud83d\udcd0 Flexible positioning and layout system</li> <li>\ud83c\udfaf Easy-to-use API</li> <li>\ud83c\udfac Export to various video formats</li> <li>\ud83d\udda5\ufe0f Live preview during development</li> <li>\u2699\ufe0f Command-line interface with preview and render options</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>\ud83d\udcda Getting Started</li> <li>\ud83d\udcd6 User Guide</li> <li>\ud83d\udd0d API Reference</li> <li>\ud83d\udca1 Examples</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install arabic-text-animator\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from arabic_animations.core.scene import Scene\nfrom arabic_animations.core.text import Text\nfrom arabic_animations.core.position import Position, Padding\nfrom arabic_animations.core.color import Color, Colors, Style\n\n# Create scene\nscene = Scene(width=1920, height=1080)\n\n# Create text with styling\ntext = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645\",\n    position=Position.TOP,\n    padding=Padding(top=50),\n    style=Style(\n        stroke_color=Color.from_hex(\"#B8860B\"),\n        fill_color=Color.from_hex(\"#FFD700\"),\n        stroke_width=3.0\n    ),\n    write_duration=2.0\n)\n\nscene.add(text)\n</code></pre>"},{"location":"#command-line-usage","title":"Command Line Usage","text":"<pre><code># Preview animation\nata preview my_animation.py\n\n# Render to video\nata render my_animation.py\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Check out our GitHub repository for: - Source code - Issue tracking - Feature requests - Pull requests</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This section provides detailed documentation for all the core classes and modules in Arabic Text Animator.</p>"},{"location":"api-reference/#core-components","title":"Core Components","text":"<ul> <li>Scene - The main container for your animations</li> <li>Text - Text element creation and manipulation</li> <li>Position - Positioning and layout utilities</li> <li>Color - Color management and effects</li> </ul> <p>Each component's documentation includes: - Complete method signatures - Parameter descriptions - Usage examples - Return value details</p>"},{"location":"api-reference/color/","title":"Color","text":""},{"location":"api-reference/color/#arabic_animations.core.color.Color","title":"<code>arabic_animations.core.color.Color</code>  <code>dataclass</code>","text":"<p>Color class supporting multiple formats and alpha channel Values are stored internally as RGB (0-1 range)</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>@dataclass\nclass Color:\n    \"\"\"\n    Color class supporting multiple formats and alpha channel\n    Values are stored internally as RGB (0-1 range)\n    \"\"\"\n    r: float = 0.0\n    g: float = 0.0\n    b: float = 0.0\n    a: float = 1.0\n\n    @classmethod\n    def from_rgb(cls, r: float, g: float, b: float, a: float = 1.0) -&gt; 'Color':\n        \"\"\"Create from RGB values (0-1 range)\"\"\"\n        return cls(r, g, b, a)\n\n    @classmethod\n    def from_rgb255(cls, r: int, g: int, b: int, a: float = 1.0) -&gt; 'Color':\n        \"\"\"Create from RGB values (0-255 range)\"\"\"\n        return cls(r/255, g/255, b/255, a)\n\n    @classmethod\n    def from_hex(cls, hex_color: str) -&gt; 'Color':\n        \"\"\"Create from hex string (#RRGGBB or #RRGGBBAA)\"\"\"\n        hex_color = hex_color.lstrip('#')\n        if len(hex_color) == 6:\n            r, g, b = tuple(int(hex_color[i:i+2], 16)/255 for i in (0, 2, 4))\n            return cls(r, g, b)\n        elif len(hex_color) == 8:\n            r, g, b, a = tuple(int(hex_color[i:i+2], 16)/255 for i in (0, 2, 4, 6))\n            return cls(r, g, b, a)\n        raise ValueError(\"Invalid hex color format\")\n\n    @classmethod\n    def from_hsl(cls, h: float, s: float, l: float, a: float = 1.0) -&gt; 'Color':\n        \"\"\"Create from HSL values (H: 0-360, S: 0-1, L: 0-1)\"\"\"\n        r, g, b = colorsys.hls_to_rgb(h/360, l, s)\n        return cls(r, g, b, a)\n\n    @classmethod\n    def from_hsv(cls, h: float, s: float, v: float, a: float = 1.0) -&gt; 'Color':\n        \"\"\"Create from HSV values (H: 0-360, S: 0-1, V: 0-1)\"\"\"\n        r, g, b = colorsys.hsv_to_rgb(h/360, s, v)\n        return cls(r, g, b, a)\n\n    def to_rgb(self) -&gt; Tuple[float, float, float, float]:\n        \"\"\"Get RGB values (0-1 range)\"\"\"\n        return (self.r, self.g, self.b, self.a)\n\n    def to_rgb255(self) -&gt; Tuple[int, int, int, float]:\n        \"\"\"Get RGB values (0-255 range)\"\"\"\n        return (int(self.r * 255), int(self.g * 255), int(self.b * 255), self.a)\n\n    def to_hex(self) -&gt; str:\n        \"\"\"Get hex string\"\"\"\n        if self.a == 1:\n            return f\"#{int(self.r*255):02x}{int(self.g*255):02x}{int(self.b*255):02x}\"\n        return f\"#{int(self.r*255):02x}{int(self.g*255):02x}{int(self.b*255):02x}{int(self.a*255):02x}\"\n\n    def to_hsl(self) -&gt; Tuple[float, float, float, float]:\n        \"\"\"Get HSL values\"\"\"\n        h, l, s = colorsys.rgb_to_hls(self.r, self.g, self.b)\n        return (h*360, s, l, self.a)\n\n    def to_hsv(self) -&gt; Tuple[float, float, float, float]:\n        \"\"\"Get HSV values\"\"\"\n        h, s, v = colorsys.rgb_to_hsv(self.r, self.g, self.b)\n        return (h*360, s, v, self.a)\n\n    def with_alpha(self, alpha: float) -&gt; 'Color':\n        \"\"\"Return new color with modified alpha\"\"\"\n        return Color(self.r, self.g, self.b, alpha)\n\n    def lighten(self, amount: float) -&gt; 'Color':\n        \"\"\"Return lightened color\"\"\"\n        h, s, l, a = self.to_hsl()\n        return Color.from_hsl(h, s, min(1, l + amount), a)\n\n    def darken(self, amount: float) -&gt; 'Color':\n        \"\"\"Return darkened color\"\"\"\n        h, s, l, a = self.to_hsl()\n        return Color.from_hsl(h, s, max(0, l - amount), a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.darken","title":"<code>darken(amount)</code>","text":"<p>Return darkened color</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>def darken(self, amount: float) -&gt; 'Color':\n    \"\"\"Return darkened color\"\"\"\n    h, s, l, a = self.to_hsl()\n    return Color.from_hsl(h, s, max(0, l - amount), a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.from_hex","title":"<code>from_hex(hex_color)</code>  <code>classmethod</code>","text":"<p>Create from hex string (#RRGGBB or #RRGGBBAA)</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>@classmethod\ndef from_hex(cls, hex_color: str) -&gt; 'Color':\n    \"\"\"Create from hex string (#RRGGBB or #RRGGBBAA)\"\"\"\n    hex_color = hex_color.lstrip('#')\n    if len(hex_color) == 6:\n        r, g, b = tuple(int(hex_color[i:i+2], 16)/255 for i in (0, 2, 4))\n        return cls(r, g, b)\n    elif len(hex_color) == 8:\n        r, g, b, a = tuple(int(hex_color[i:i+2], 16)/255 for i in (0, 2, 4, 6))\n        return cls(r, g, b, a)\n    raise ValueError(\"Invalid hex color format\")\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.from_hsl","title":"<code>from_hsl(h, s, l, a=1.0)</code>  <code>classmethod</code>","text":"<p>Create from HSL values (H: 0-360, S: 0-1, L: 0-1)</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>@classmethod\ndef from_hsl(cls, h: float, s: float, l: float, a: float = 1.0) -&gt; 'Color':\n    \"\"\"Create from HSL values (H: 0-360, S: 0-1, L: 0-1)\"\"\"\n    r, g, b = colorsys.hls_to_rgb(h/360, l, s)\n    return cls(r, g, b, a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.from_hsv","title":"<code>from_hsv(h, s, v, a=1.0)</code>  <code>classmethod</code>","text":"<p>Create from HSV values (H: 0-360, S: 0-1, V: 0-1)</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>@classmethod\ndef from_hsv(cls, h: float, s: float, v: float, a: float = 1.0) -&gt; 'Color':\n    \"\"\"Create from HSV values (H: 0-360, S: 0-1, V: 0-1)\"\"\"\n    r, g, b = colorsys.hsv_to_rgb(h/360, s, v)\n    return cls(r, g, b, a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.from_rgb","title":"<code>from_rgb(r, g, b, a=1.0)</code>  <code>classmethod</code>","text":"<p>Create from RGB values (0-1 range)</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>@classmethod\ndef from_rgb(cls, r: float, g: float, b: float, a: float = 1.0) -&gt; 'Color':\n    \"\"\"Create from RGB values (0-1 range)\"\"\"\n    return cls(r, g, b, a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.from_rgb255","title":"<code>from_rgb255(r, g, b, a=1.0)</code>  <code>classmethod</code>","text":"<p>Create from RGB values (0-255 range)</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>@classmethod\ndef from_rgb255(cls, r: int, g: int, b: int, a: float = 1.0) -&gt; 'Color':\n    \"\"\"Create from RGB values (0-255 range)\"\"\"\n    return cls(r/255, g/255, b/255, a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.lighten","title":"<code>lighten(amount)</code>","text":"<p>Return lightened color</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>def lighten(self, amount: float) -&gt; 'Color':\n    \"\"\"Return lightened color\"\"\"\n    h, s, l, a = self.to_hsl()\n    return Color.from_hsl(h, s, min(1, l + amount), a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.to_hex","title":"<code>to_hex()</code>","text":"<p>Get hex string</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>def to_hex(self) -&gt; str:\n    \"\"\"Get hex string\"\"\"\n    if self.a == 1:\n        return f\"#{int(self.r*255):02x}{int(self.g*255):02x}{int(self.b*255):02x}\"\n    return f\"#{int(self.r*255):02x}{int(self.g*255):02x}{int(self.b*255):02x}{int(self.a*255):02x}\"\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.to_hsl","title":"<code>to_hsl()</code>","text":"<p>Get HSL values</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>def to_hsl(self) -&gt; Tuple[float, float, float, float]:\n    \"\"\"Get HSL values\"\"\"\n    h, l, s = colorsys.rgb_to_hls(self.r, self.g, self.b)\n    return (h*360, s, l, self.a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.to_hsv","title":"<code>to_hsv()</code>","text":"<p>Get HSV values</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>def to_hsv(self) -&gt; Tuple[float, float, float, float]:\n    \"\"\"Get HSV values\"\"\"\n    h, s, v = colorsys.rgb_to_hsv(self.r, self.g, self.b)\n    return (h*360, s, v, self.a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.to_rgb","title":"<code>to_rgb()</code>","text":"<p>Get RGB values (0-1 range)</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>def to_rgb(self) -&gt; Tuple[float, float, float, float]:\n    \"\"\"Get RGB values (0-1 range)\"\"\"\n    return (self.r, self.g, self.b, self.a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.to_rgb255","title":"<code>to_rgb255()</code>","text":"<p>Get RGB values (0-255 range)</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>def to_rgb255(self) -&gt; Tuple[int, int, int, float]:\n    \"\"\"Get RGB values (0-255 range)\"\"\"\n    return (int(self.r * 255), int(self.g * 255), int(self.b * 255), self.a)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Color.with_alpha","title":"<code>with_alpha(alpha)</code>","text":"<p>Return new color with modified alpha</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>def with_alpha(self, alpha: float) -&gt; 'Color':\n    \"\"\"Return new color with modified alpha\"\"\"\n    return Color(self.r, self.g, self.b, alpha)\n</code></pre>"},{"location":"api-reference/color/#arabic_animations.core.color.Style","title":"<code>arabic_animations.core.color.Style</code>  <code>dataclass</code>","text":"<p>Text styling options</p> Source code in <code>arabic_animations/core/color.py</code> <pre><code>@dataclass\nclass Style:\n    \"\"\"Text styling options\"\"\"\n    stroke_color: Color = field(default_factory=lambda: Colors.BLACK)\n    fill_color: Optional[Color] = None\n    stroke_width: float = 2.0\n    background_color: Color = field(default_factory=lambda: Colors.PAPER_WHITE)\n    shadow_color: Optional[Color] = None\n    shadow_offset: Tuple[float, float] = (0, 0)\n    shadow_blur: float = 0.0\n    glow_color: Optional[Color] = None\n    glow_radius: float = 0.0\n    gradient: Optional[Tuple[Color, Color]] = None\n    gradient_direction: Optional[Tuple[float, float]] = None  # (x, y) vector\n</code></pre>"},{"location":"api-reference/color/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/color/#creating-colors","title":"Creating Colors","text":"<pre><code>from arabic_animations.core.color import Color, Colors\n\n# From RGB (0-1)\nred = Color.from_rgb(1.0, 0.0, 0.0)\n\n# From RGB (0-255)\nblue = Color.from_rgb255(0, 0, 255)\n\n# From hex\ngold = Color.from_hex(\"#FFD700\")\n\n# From HSL\ngreen = Color.from_hsl(120, 1.0, 0.5)\n</code></pre>"},{"location":"api-reference/color/#using-predefined-colors","title":"Using Predefined Colors","text":"<pre><code># Basic colors\nblack = Colors.BLACK\nwhite = Colors.WHITE\n\n# UI colors\nprimary = Colors.PRIMARY\nwarning = Colors.WARNING\n\n# Paper colors\nbackground = Colors.PAPER_CREAM\n</code></pre>"},{"location":"api-reference/color/#creating-styles","title":"Creating Styles","text":"<pre><code>from arabic_animations.core.color import Style\n\n# Basic style\nstyle = Style(\n    stroke_color=Colors.BLACK,\n    fill_color=Colors.BLUE\n)\n\n# Complex style\nstyle = Style(\n    stroke_color=Colors.PRIMARY,\n    gradient=(Colors.PRIMARY, Colors.SECONDARY),\n    glow_color=Colors.WHITE.with_alpha(0.6),\n    glow_radius=3.0\n)\n</code></pre>"},{"location":"api-reference/position/","title":"Position","text":""},{"location":"api-reference/position/#arabic_animations.core.position.Position","title":"<code>arabic_animations.core.position.Position</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Predefined positions for text placement</p> Source code in <code>arabic_animations/core/position.py</code> <pre><code>class Position(Enum):\n    \"\"\"Predefined positions for text placement\"\"\"\n    TOP = \"top\"\n    BOTTOM = \"bottom\"\n    LEFT = \"left\"\n    RIGHT = \"right\"\n    CENTER = \"center\"\n    TOP_LEFT = \"top_left\"\n    TOP_RIGHT = \"top_right\"\n    BOTTOM_LEFT = \"bottom_left\"\n    BOTTOM_RIGHT = \"bottom_right\"\n</code></pre>"},{"location":"api-reference/position/#arabic_animations.core.position.Padding","title":"<code>arabic_animations.core.position.Padding</code>  <code>dataclass</code>","text":"<p>Padding configuration for text positioning</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>float</code> <p>Padding from top edge</p> <code>0</code> <code>right</code> <code>float</code> <p>Padding from right edge</p> <code>0</code> <code>bottom</code> <code>float</code> <p>Padding from bottom edge</p> <code>0</code> <code>left</code> <code>float</code> <p>Padding from left edge</p> <code>0</code> Source code in <code>arabic_animations/core/position.py</code> <pre><code>@dataclass\nclass Padding:\n    \"\"\"\n    Padding configuration for text positioning\n\n    Args:\n        top: Padding from top edge\n        right: Padding from right edge\n        bottom: Padding from bottom edge\n        left: Padding from left edge\n    \"\"\"\n    top: float = 0\n    right: float = 0\n    bottom: float = 0\n    left: float = 0\n\n    @classmethod\n    def all(cls, value: float) -&gt; 'Padding':\n        \"\"\"Create padding with same value on all sides\"\"\"\n        return cls(value, value, value, value)\n\n    @classmethod\n    def horizontal(cls, value: float) -&gt; 'Padding':\n        \"\"\"Create padding with horizontal values only\"\"\"\n        return cls(0, value, 0, value)\n\n    @classmethod\n    def vertical(cls, value: float) -&gt; 'Padding':\n        \"\"\"Create padding with vertical values only\"\"\"\n        return cls(value, 0, value, 0)\n</code></pre>"},{"location":"api-reference/position/#arabic_animations.core.position.Padding.all","title":"<code>all(value)</code>  <code>classmethod</code>","text":"<p>Create padding with same value on all sides</p> Source code in <code>arabic_animations/core/position.py</code> <pre><code>@classmethod\ndef all(cls, value: float) -&gt; 'Padding':\n    \"\"\"Create padding with same value on all sides\"\"\"\n    return cls(value, value, value, value)\n</code></pre>"},{"location":"api-reference/position/#arabic_animations.core.position.Padding.horizontal","title":"<code>horizontal(value)</code>  <code>classmethod</code>","text":"<p>Create padding with horizontal values only</p> Source code in <code>arabic_animations/core/position.py</code> <pre><code>@classmethod\ndef horizontal(cls, value: float) -&gt; 'Padding':\n    \"\"\"Create padding with horizontal values only\"\"\"\n    return cls(0, value, 0, value)\n</code></pre>"},{"location":"api-reference/position/#arabic_animations.core.position.Padding.vertical","title":"<code>vertical(value)</code>  <code>classmethod</code>","text":"<p>Create padding with vertical values only</p> Source code in <code>arabic_animations/core/position.py</code> <pre><code>@classmethod\ndef vertical(cls, value: float) -&gt; 'Padding':\n    \"\"\"Create padding with vertical values only\"\"\"\n    return cls(value, 0, value, 0)\n</code></pre>"},{"location":"api-reference/position/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/position/#using-positions","title":"Using Positions","text":"<pre><code>from arabic_animations.core.position import Position, Padding\n\n# Center position\ntext = Text(\"Hello\", position=Position.CENTER)\n\n# Top with padding\ntext = Text(\n    \"Hello\",\n    position=Position.TOP,\n    padding=Padding(top=50)\n)\n\n# Custom padding\ntext = Text(\n    \"Hello\",\n    position=Position.TOP_RIGHT,\n    padding=Padding(top=20, right=30)\n)\n</code></pre>"},{"location":"api-reference/position/#padding-helpers","title":"Padding Helpers","text":"<pre><code># All sides equal\npadding = Padding.all(20)\n\n# Horizontal padding\npadding = Padding.horizontal(50)\n\n# Vertical padding\npadding = Padding.vertical(30)\n</code></pre>"},{"location":"api-reference/scene/","title":"Scene","text":""},{"location":"api-reference/scene/#arabic_animations.core.scene.Scene","title":"<code>arabic_animations.core.scene.Scene</code>","text":"<p>A scene represents a complete animation with one or more text objects.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the scene in pixels</p> <code>1920</code> <code>height</code> <code>int</code> <p>Height of the scene in pixels</p> <code>1080</code> <code>fps</code> <code>int</code> <p>Frames per second for the animation</p> <code>60</code> Source code in <code>arabic_animations/core/scene.py</code> <pre><code>class Scene:\n    \"\"\"\n    A scene represents a complete animation with one or more text objects.\n\n    Args:\n        width: Width of the scene in pixels\n        height: Height of the scene in pixels\n        fps: Frames per second for the animation\n    \"\"\"\n    def __init__(self, width: int = 1920, height: int = 1080, fps: int = 60):\n        self.width = width\n        self.height = height\n        self.fps = fps\n        self.duration = 0\n        self.objects: List[Any] = []\n        self.serial = False\n        self.background_color: Color = Colors.PAPER_WHITE\n\n    def add(self, *objects: Any, serial: bool = False) -&gt; None:\n        \"\"\"\n        Add objects to the scene.\n\n        Args:\n            *objects: One or more objects to add to the scene\n            serial: If True, objects will animate one after another. If False, they animate simultaneously.\n        \"\"\"\n        self.serial = serial\n        current_delay = 0\n\n        for obj in objects:\n            if hasattr(obj, 'set_scene_dimensions'):\n                obj.set_scene_dimensions(self.width, self.height)\n\n            if serial:\n                obj.start_time = current_delay\n                current_delay += obj.duration\n            else:\n                obj.start_time = 0\n\n            self.objects.append(obj)\n\n        self.duration = current_delay if serial else max(obj.duration for obj in objects)\n\n    def render_frame(self, t: float) -&gt; np.ndarray:\n        \"\"\"\n        Render a single frame at time t.\n\n        Args:\n            t: Time in seconds\n\n        Returns:\n            A numpy array representing the frame in RGBA format\n        \"\"\"\n        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, self.width, self.height)\n        ctx = cairo.Context(surface)\n\n        # Clear background with specified color\n        ctx.set_source_rgba(*self.background_color.to_rgb())\n        ctx.paint()\n\n        # Render all objects\n        for obj in self.objects:\n            if hasattr(obj, 'render'):\n                if t &gt;= obj.start_time and t &lt;= obj.start_time + obj.duration:\n                    obj.render(ctx, t - obj.start_time)\n                elif t &gt; obj.start_time + obj.duration:\n                    obj.render(ctx, obj.duration)\n\n        # Convert to numpy array\n        data = surface.get_data()\n        arr = np.ndarray(shape=(self.height, self.width, 4),\n                        dtype=np.uint8,\n                        buffer=data)\n        return arr\n</code></pre>"},{"location":"api-reference/scene/#arabic_animations.core.scene.Scene.add","title":"<code>add(*objects, serial=False)</code>","text":"<p>Add objects to the scene.</p> <p>Parameters:</p> Name Type Description Default <code>*objects</code> <code>Any</code> <p>One or more objects to add to the scene</p> <code>()</code> <code>serial</code> <code>bool</code> <p>If True, objects will animate one after another. If False, they animate simultaneously.</p> <code>False</code> Source code in <code>arabic_animations/core/scene.py</code> <pre><code>def add(self, *objects: Any, serial: bool = False) -&gt; None:\n    \"\"\"\n    Add objects to the scene.\n\n    Args:\n        *objects: One or more objects to add to the scene\n        serial: If True, objects will animate one after another. If False, they animate simultaneously.\n    \"\"\"\n    self.serial = serial\n    current_delay = 0\n\n    for obj in objects:\n        if hasattr(obj, 'set_scene_dimensions'):\n            obj.set_scene_dimensions(self.width, self.height)\n\n        if serial:\n            obj.start_time = current_delay\n            current_delay += obj.duration\n        else:\n            obj.start_time = 0\n\n        self.objects.append(obj)\n\n    self.duration = current_delay if serial else max(obj.duration for obj in objects)\n</code></pre>"},{"location":"api-reference/scene/#arabic_animations.core.scene.Scene.render_frame","title":"<code>render_frame(t)</code>","text":"<p>Render a single frame at time t.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time in seconds</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>A numpy array representing the frame in RGBA format</p> Source code in <code>arabic_animations/core/scene.py</code> <pre><code>def render_frame(self, t: float) -&gt; np.ndarray:\n    \"\"\"\n    Render a single frame at time t.\n\n    Args:\n        t: Time in seconds\n\n    Returns:\n        A numpy array representing the frame in RGBA format\n    \"\"\"\n    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, self.width, self.height)\n    ctx = cairo.Context(surface)\n\n    # Clear background with specified color\n    ctx.set_source_rgba(*self.background_color.to_rgb())\n    ctx.paint()\n\n    # Render all objects\n    for obj in self.objects:\n        if hasattr(obj, 'render'):\n            if t &gt;= obj.start_time and t &lt;= obj.start_time + obj.duration:\n                obj.render(ctx, t - obj.start_time)\n            elif t &gt; obj.start_time + obj.duration:\n                obj.render(ctx, obj.duration)\n\n    # Convert to numpy array\n    data = surface.get_data()\n    arr = np.ndarray(shape=(self.height, self.width, 4),\n                    dtype=np.uint8,\n                    buffer=data)\n    return arr\n</code></pre>"},{"location":"api-reference/scene/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/scene/#basic-scene-setup","title":"Basic Scene Setup","text":"<pre><code>from arabic_animations.core.scene import Scene\n\n# Create a scene with default settings (1920x1080, 60fps)\nscene = Scene()\n\n# Create a scene with custom settings\nscene = Scene(\n    width=1280,\n    height=720,\n    fps=30\n)\n</code></pre>"},{"location":"api-reference/scene/#adding-objects","title":"Adding Objects","text":"<pre><code># Add a single object\nscene.add(text)\n\n# Add multiple objects in parallel\nscene.add(text1, text2, serial=False)\n\n# Add multiple objects serially\nscene.add(text1, text2, serial=True)\n</code></pre>"},{"location":"api-reference/scene/#scene-background","title":"Scene Background","text":"<pre><code>from arabic_animations.core.color import Colors\n\n# Set scene background color\nscene.background_color = Colors.PAPER_CREAM\n</code></pre>"},{"location":"api-reference/text/","title":"Text","text":""},{"location":"api-reference/text/#arabic_animations.core.text.Text","title":"<code>arabic_animations.core.text.Text</code>","text":"<p>A text object that can be animated.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to display</p> required <code>position</code> <code>Position</code> <p>Position enum value or tuple of coordinates</p> <code>CENTER</code> <code>padding</code> <code>Optional[Padding]</code> <p>Padding object for spacing</p> <code>None</code> <code>font_name</code> <code>str</code> <p>Name of the font to use</p> <code>'DecoType Thuluth'</code> <code>font_size</code> <code>int</code> <p>Size of the font in points</p> <code>72</code> <code>style</code> <code>Optional[Style]</code> <p>Style object for visual appearance</p> <code>None</code> <code>write_duration</code> <code>float</code> <p>Duration of the writing animation in seconds</p> <code>1.0</code> Source code in <code>arabic_animations/core/text.py</code> <pre><code>class Text:\n    \"\"\"\n    A text object that can be animated.\n\n    Args:\n        text: The text to display\n        position: Position enum value or tuple of coordinates\n        padding: Padding object for spacing\n        font_name: Name of the font to use\n        font_size: Size of the font in points\n        style: Style object for visual appearance\n        write_duration: Duration of the writing animation in seconds\n    \"\"\"\n    def __init__(self,\n                 text: str,\n                 position: Position = Position.CENTER,\n                 padding: Optional[Padding] = None,\n                 font_name: str = \"DecoType Thuluth\",\n                 font_size: int = 72,\n                 style: Optional[Style] = None,\n                 write_duration: float = 1.0):\n        self.text = text\n        self.position_type = position if isinstance(position, Position) else Position.CENTER\n        self.padding = padding if padding else Padding()\n        self.font_name = font_name\n        self.font_size = font_size\n        self.style = style if style else Style()\n        self.duration = write_duration\n        self._position: Tuple[float, float] = (0, 0)\n        self._init_path()\n\n    def _init_path(self) -&gt; None:\n        \"\"\"Initialize the text path\"\"\"\n        try:\n            logger.debug(f\"Initializing text: {self.text}\")\n            surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 1, 1)\n            ctx = cairo.Context(surface)\n\n            logger.debug(\"Creating Pango layout...\")\n            layout = PangoCairo.create_layout(ctx)\n            font_desc = Pango.FontDescription(f\"{self.font_name} {self.font_size}\")\n            logger.debug(f\"Using font: {self.font_name}\")\n            layout.set_font_description(font_desc)\n            layout.set_text(self.text, -1)\n            layout.set_alignment(Pango.Alignment.RIGHT)\n            layout.set_auto_dir(True)\n\n            # Get text extents to calculate position\n            ink_rect, logical_rect = layout.get_pixel_extents()\n            logger.debug(f\"Text extents - ink: {ink_rect}, logical: {logical_rect}\")\n\n            if logical_rect.width == 0 or logical_rect.height == 0:\n                raise ValueError(\"Text layout has zero size - font might not be available\")\n\n            # Store text dimensions for scene calculations\n            self.width = logical_rect.width\n            self.height = logical_rect.height\n\n            # Position will be set by scene when adding the text\n            self._layout = layout\n            self._calculate_path()\n\n        except Exception as e:\n            logger.error(f\"Error initializing text: {e}\")\n            logger.debug(traceback.format_exc())\n            raise\n\n    def _calculate_path(self) -&gt; None:\n        \"\"\"Calculate the path based on current position\"\"\"\n        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 1, 1)\n        ctx = cairo.Context(surface)\n\n        ctx.move_to(*self._position)\n        PangoCairo.layout_path(ctx, self._layout)\n        path = ctx.copy_path_flat()\n\n        self.strokes = self._group_strokes(path)\n        logger.debug(f\"Created {len(self.strokes)} strokes\")\n        self.stroke_lengths = self._calculate_lengths()\n        self.total_length = sum(self.stroke_lengths)\n\n    def _group_strokes(self, path: List[Tuple[int, Tuple[float, float]]]) -&gt; List[List[Tuple[int, Tuple[float, float]]]]:\n        \"\"\"\n        Group path elements into continuous strokes\n\n        Args:\n            path: List of path elements from cairo\n\n        Returns:\n            List of strokes, where each stroke is a list of path elements\n        \"\"\"\n        path_elements = list(path)\n        strokes = []\n        current_stroke = []\n\n        for i in range(len(path_elements)):\n            elem = path_elements[i]\n            if elem[0] == cairo.PATH_MOVE_TO:\n                if current_stroke:\n                    strokes.append(current_stroke)\n                current_stroke = [elem]\n            else:\n                current_stroke.append(elem)\n        if current_stroke:\n            strokes.append(current_stroke)\n\n        # Sort strokes from right to left\n        strokes.sort(key=lambda s: -s[0][1][0])  # Sort by x-coordinate in reverse\n        return strokes\n\n    def _calculate_lengths(self) -&gt; List[float]:\n        \"\"\"\n        Calculate the length of each stroke\n\n        Returns:\n            List of stroke lengths\n        \"\"\"\n        lengths = []\n        for stroke in self.strokes:\n            length = 0\n            for i in range(1, len(stroke)):\n                if stroke[i][0] == cairo.PATH_LINE_TO:\n                    x1, y1 = stroke[i-1][1]\n                    x2, y2 = stroke[i][1]\n                    length += math.sqrt((x2-x1)**2 + (y2-y1)**2)\n            lengths.append(length)\n        return lengths\n\n    def render(self, ctx: cairo.Context, t: float) -&gt; None:\n        \"\"\"\n        Render the text at time t\n\n        Args:\n            ctx: Cairo context to draw on\n            t: Time in seconds\n        \"\"\"\n        if t &gt; self.duration:\n            t = self.duration\n\n        progress = t / self.duration\n        target_length = progress * self.total_length\n\n        # Apply shadow if specified\n        if self.style.shadow_color:\n            ctx.save()\n            ctx.translate(*self.style.shadow_offset)\n            self._render_strokes(ctx, target_length, self.style.shadow_color)\n            ctx.restore()\n\n        # Apply glow if specified\n        if self.style.glow_color and self.style.glow_radius &gt; 0:\n            for i in range(3):\n                ctx.save()\n                ctx.set_line_width(self.style.stroke_width + self.style.glow_radius * (i+1)/3)\n                glow_alpha = self.style.glow_color.a * (3-i)/3\n                glow = self.style.glow_color.with_alpha(glow_alpha)\n                self._render_strokes(ctx, target_length, glow)\n                ctx.restore()\n\n        # Render fill if specified\n        if self.style.fill_color:\n            ctx.save()\n            self._render_strokes(ctx, target_length, self.style.fill_color, True)\n            ctx.restore()\n\n        # Render stroke\n        ctx.set_line_width(self.style.stroke_width)\n        self._render_strokes(ctx, target_length, self.style.stroke_color)\n\n    def _render_strokes(self, ctx: cairo.Context, target_length: float, color: Color, fill: bool = False) -&gt; None:\n        \"\"\"\n        Helper method to render strokes\n\n        Args:\n            ctx: Cairo context to draw on\n            target_length: Target length to draw up to\n            color: Color to use for rendering\n            fill: Whether to fill the path instead of stroking\n        \"\"\"\n        current_length = 0\n\n        # Handle gradient if specified\n        if self.style.gradient and not fill:\n            pat = cairo.LinearGradient(0, 0,\n                                     *self.style.gradient_direction or (0, self.height))\n            pat.add_color_stop_rgba(0, *self.style.gradient[0].to_rgb())\n            pat.add_color_stop_rgba(1, *self.style.gradient[1].to_rgb())\n            ctx.set_source(pat)\n        else:\n            ctx.set_source_rgba(*color.to_rgb())\n\n        for stroke_idx, stroke in enumerate(self.strokes):\n            if current_length &gt;= target_length:\n                break\n\n            ctx.new_path()\n            ctx.move_to(*stroke[0][1])\n\n            stroke_length = self.stroke_lengths[stroke_idx]\n\n            for i in range(1, len(stroke)):\n                if stroke[i][0] == cairo.PATH_LINE_TO:\n                    x1, y1 = stroke[i-1][1]\n                    x2, y2 = stroke[i][1]\n                    segment_length = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n\n                    if current_length + segment_length &lt;= target_length:\n                        ctx.line_to(x2, y2)\n                        current_length += segment_length\n                    else:\n                        remaining = target_length - current_length\n                        t = remaining / segment_length\n                        new_x = x1 + (x2 - x1) * t\n                        new_y = y1 + (y2 - y1) * t\n                        ctx.line_to(new_x, new_y)\n                        break\n\n            ctx.stroke()\n\n    def set_scene_dimensions(self, width: int, height: int) -&gt; None:\n        \"\"\"Update position based on scene dimensions\"\"\"\n        self._position = calculate_position(\n            self.width, self.height,\n            width, height,\n            self.position_type,\n            self.padding\n        )\n        self._calculate_path()\n\n    @staticmethod\n    def list_available_fonts() -&gt; None:\n        \"\"\"List all available Pango fonts to stdout\"\"\"\n        try:\n            surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 1, 1)\n            ctx = cairo.Context(surface)\n            layout = PangoCairo.create_layout(ctx)\n\n            # Get font map\n            font_map = PangoCairo.font_map_get_default()\n            families = font_map.list_families()\n\n            print(\"Available fonts:\")\n            for family in families:\n                print(f\"- {family.get_name()}\")\n        except Exception as e:\n            print(f\"Error listing fonts: {e}\")\n            print(traceback.format_exc())\n</code></pre>"},{"location":"api-reference/text/#arabic_animations.core.text.Text.list_available_fonts","title":"<code>list_available_fonts()</code>  <code>staticmethod</code>","text":"<p>List all available Pango fonts to stdout</p> Source code in <code>arabic_animations/core/text.py</code> <pre><code>@staticmethod\ndef list_available_fonts() -&gt; None:\n    \"\"\"List all available Pango fonts to stdout\"\"\"\n    try:\n        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 1, 1)\n        ctx = cairo.Context(surface)\n        layout = PangoCairo.create_layout(ctx)\n\n        # Get font map\n        font_map = PangoCairo.font_map_get_default()\n        families = font_map.list_families()\n\n        print(\"Available fonts:\")\n        for family in families:\n            print(f\"- {family.get_name()}\")\n    except Exception as e:\n        print(f\"Error listing fonts: {e}\")\n        print(traceback.format_exc())\n</code></pre>"},{"location":"api-reference/text/#arabic_animations.core.text.Text.render","title":"<code>render(ctx, t)</code>","text":"<p>Render the text at time t</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>Cairo context to draw on</p> required <code>t</code> <code>float</code> <p>Time in seconds</p> required Source code in <code>arabic_animations/core/text.py</code> <pre><code>def render(self, ctx: cairo.Context, t: float) -&gt; None:\n    \"\"\"\n    Render the text at time t\n\n    Args:\n        ctx: Cairo context to draw on\n        t: Time in seconds\n    \"\"\"\n    if t &gt; self.duration:\n        t = self.duration\n\n    progress = t / self.duration\n    target_length = progress * self.total_length\n\n    # Apply shadow if specified\n    if self.style.shadow_color:\n        ctx.save()\n        ctx.translate(*self.style.shadow_offset)\n        self._render_strokes(ctx, target_length, self.style.shadow_color)\n        ctx.restore()\n\n    # Apply glow if specified\n    if self.style.glow_color and self.style.glow_radius &gt; 0:\n        for i in range(3):\n            ctx.save()\n            ctx.set_line_width(self.style.stroke_width + self.style.glow_radius * (i+1)/3)\n            glow_alpha = self.style.glow_color.a * (3-i)/3\n            glow = self.style.glow_color.with_alpha(glow_alpha)\n            self._render_strokes(ctx, target_length, glow)\n            ctx.restore()\n\n    # Render fill if specified\n    if self.style.fill_color:\n        ctx.save()\n        self._render_strokes(ctx, target_length, self.style.fill_color, True)\n        ctx.restore()\n\n    # Render stroke\n    ctx.set_line_width(self.style.stroke_width)\n    self._render_strokes(ctx, target_length, self.style.stroke_color)\n</code></pre>"},{"location":"api-reference/text/#arabic_animations.core.text.Text.set_scene_dimensions","title":"<code>set_scene_dimensions(width, height)</code>","text":"<p>Update position based on scene dimensions</p> Source code in <code>arabic_animations/core/text.py</code> <pre><code>def set_scene_dimensions(self, width: int, height: int) -&gt; None:\n    \"\"\"Update position based on scene dimensions\"\"\"\n    self._position = calculate_position(\n        self.width, self.height,\n        width, height,\n        self.position_type,\n        self.padding\n    )\n    self._calculate_path()\n</code></pre>"},{"location":"api-reference/text/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/text/#basic-text-creation","title":"Basic Text Creation","text":"<pre><code>from arabic_animations.core.text import Text\nfrom arabic_animations.core.position import Position\nfrom arabic_animations.core.color import Style, Colors\n\n# Simple text\ntext = Text(\"Hello\")\n\n# Positioned text\ntext = Text(\n    \"Hello\",\n    position=Position.CENTER,\n    font_name=\"Arial\",\n    font_size=72\n)\n\n# Styled text\ntext = Text(\n    \"Hello\",\n    style=Style(\n        stroke_color=Colors.BLACK,\n        fill_color=Colors.BLUE,\n        stroke_width=2.0\n    )\n)\n</code></pre>"},{"location":"api-reference/text/#font-management","title":"Font Management","text":"<pre><code># List available fonts\nText.list_available_fonts()\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Explore practical examples of Arabic Text Animator in action. From basic usage to advanced techniques, these examples will help you understand how to use the library effectively.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":"<ul> <li>Basic Examples</li> <li>Simple text animations</li> <li>Basic positioning</li> <li> <p>Color applications</p> </li> <li> <p>Advanced Examples</p> </li> <li>Complex animations</li> <li>Multiple text elements</li> <li>Custom effects</li> <li>Real-world use cases</li> </ul> <p>Each example includes: - Complete source code - Step-by-step explanations - Visual results - Tips and best practices</p>"},{"location":"examples/advanced/","title":"Advanced Examples","text":""},{"location":"examples/advanced/#complex-styling","title":"Complex Styling","text":"<p>Example showing advanced text styling with gradients, shadows, and glow effects:</p> <pre><code>from arabic_animations.core.scene import Scene\nfrom arabic_animations.core.text import Text\nfrom arabic_animations.core.position import Position, Padding\nfrom arabic_animations.core.color import Color, Colors, Style\n\n# Create scene with sepia background\nscene = Scene(width=1920, height=1080)\nscene.background_color = Colors.PAPER_SEPIA\n\n# Create golden title with shadow\ntitle_style = Style(\n    stroke_color=Color.from_hex(\"#B8860B\"),  # Dark golden color\n    fill_color=Color.from_hex(\"#FFD700\"),    # Golden fill\n    stroke_width=3.0,\n    shadow_color=Color.from_hex(\"#00000066\"),  # Semi-transparent black\n    shadow_offset=(5, 5),\n    shadow_blur=2.0\n)\n\n# Create subtitle with gradient and glow\nsubtitle_style = Style(\n    stroke_color=Colors.PRIMARY,\n    gradient=(Colors.PRIMARY, Colors.SECONDARY),\n    gradient_direction=(0, 50),  # Vertical gradient over 50 pixels\n    stroke_width=2.0,\n    glow_color=Color.from_hex(\"#FFFFFF99\"),\n    glow_radius=3.0\n)\n\n# Create text objects\ntitle = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645\",\n    position=Position.TOP,\n    padding=Padding(top=50),\n    font_name=\"DecoType Thuluth II\",\n    font_size=128,\n    style=title_style,\n    write_duration=2.0\n)\n\nsubtitle = Text(\n    \"\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u064a\u0643\u0645\",\n    position=Position.CENTER,\n    font_name=\"DecoType Thuluth II\",\n    font_size=72,\n    style=subtitle_style,\n    write_duration=1.5\n)\n\nscene.add(title, subtitle, serial=True)\n</code></pre>"},{"location":"examples/advanced/#complex-layout","title":"Complex Layout","text":"<p>Example showing complex text positioning and timing:</p> <pre><code>from arabic_animations.core.scene import Scene\nfrom arabic_animations.core.text import Text\nfrom arabic_animations.core.position import Position, Padding\nfrom arabic_animations.core.color import Color, Colors, Style\n\n# Create scene\nscene = Scene(width=1920, height=1080)\n\n# Create styles\nheader_style = Style(\n    stroke_color=Colors.PRIMARY,\n    fill_color=Colors.PRIMARY.with_alpha(0.3),\n    stroke_width=2.0\n)\n\nbody_style = Style(\n    stroke_color=Colors.BLACK,\n    stroke_width=1.5\n)\n\nfooter_style = Style(\n    stroke_color=Colors.SECONDARY,\n    gradient=(Colors.SECONDARY, Colors.PRIMARY),\n    gradient_direction=(0, 30)\n)\n\n# Create text objects with different positions\nheader = Text(\n    \"\u0627\u0644\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\",\n    position=Position.TOP,\n    padding=Padding(top=50),\n    style=header_style,\n    font_size=96,\n    write_duration=1.5\n)\n\nbody1 = Text(\n    \"\u0627\u0644\u0646\u0635 \u0627\u0644\u0623\u0648\u0644\",\n    position=Position.TOP_LEFT,\n    padding=Padding(top=200, left=100),\n    style=body_style,\n    font_size=48,\n    write_duration=1.0\n)\n\nbody2 = Text(\n    \"\u0627\u0644\u0646\u0635 \u0627\u0644\u062b\u0627\u0646\u064a\",\n    position=Position.TOP_RIGHT,\n    padding=Padding(top=200, right=100),\n    style=body_style,\n    font_size=48,\n    write_duration=1.0\n)\n\nfooter = Text(\n    \"\u0627\u0644\u0646\u0635 \u0627\u0644\u062e\u062a\u0627\u0645\u064a\",\n    position=Position.BOTTOM,\n    padding=Padding(bottom=50),\n    style=footer_style,\n    font_size=72,\n    write_duration=1.2\n)\n\n# Add all elements with specific timing\nscene.add(header, body1, body2, footer, serial=True)\n</code></pre>"},{"location":"examples/advanced/#animation-showcase","title":"Animation Showcase","text":"<p>Example showing different animation timings and effects:</p> <pre><code>from arabic_animations.core.scene import Scene\nfrom arabic_animations.core.text import Text\nfrom arabic_animations.core.position import Position, Padding\nfrom arabic_animations.core.color import Color, Colors, Style\n\n# Create scene\nscene = Scene(width=1920, height=1080)\n\n# Create texts with different durations and styles\ntexts = [\n    Text(\n        \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647\",\n        position=Position.TOP,\n        padding=Padding(top=50),\n        style=Style(\n            stroke_color=Colors.PRIMARY,\n            glow_color=Colors.PRIMARY.with_alpha(0.6),\n            glow_radius=3.0\n        ),\n        write_duration=1.0\n    ),\n    Text(\n        \"\u0627\u0644\u0631\u062d\u0645\u0646\",\n        position=Position.CENTER,\n        style=Style(\n            stroke_color=Colors.SECONDARY,\n            fill_color=Colors.SECONDARY.with_alpha(0.3)\n        ),\n        write_duration=0.8\n    ),\n    Text(\n        \"\u0627\u0644\u0631\u062d\u064a\u0645\",\n        position=Position.BOTTOM,\n        padding=Padding(bottom=50),\n        style=Style(\n            gradient=(Colors.PRIMARY, Colors.SECONDARY),\n            gradient_direction=(0, 40)\n        ),\n        write_duration=1.2\n    )\n]\n\n# Add all texts serially\nscene.add(*texts, serial=True)\n</code></pre>"},{"location":"examples/basic/","title":"Basic Examples","text":""},{"location":"examples/basic/#simple-text-animation","title":"Simple Text Animation","text":"<p>The most basic example showing a single animated text:</p> <pre><code>from arabic_animations.core.scene import Scene\nfrom arabic_animations.core.text import Text\nfrom arabic_animations.core.position import Position\n\n# Create scene\nscene = Scene(width=1920, height=1080)\n\n# Create and add text\ntext = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645\",\n    position=Position.CENTER,\n    font_name=\"DecoType Thuluth II\",\n    font_size=128,\n    write_duration=2.0\n)\n\nscene.add(text)\n</code></pre>"},{"location":"examples/basic/#multiple-text-elements","title":"Multiple Text Elements","text":"<p>Example showing multiple text elements animating serially:</p> <pre><code>from arabic_animations.core.scene import Scene\nfrom arabic_animations.core.text import Text\nfrom arabic_animations.core.position import Position, Padding\n\n# Create scene\nscene = Scene(width=1920, height=1080)\n\n# Create text objects\ntitle = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645\",\n    position=Position.TOP,\n    padding=Padding(top=50),\n    font_size=128,\n    write_duration=2.0\n)\n\nsubtitle = Text(\n    \"\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u064a\u0643\u0645\",\n    position=Position.CENTER,\n    font_size=72,\n    write_duration=1.5\n)\n\n# Add texts serially (one after another)\nscene.add(title, subtitle, serial=True)\n</code></pre>"},{"location":"examples/basic/#basic-styling","title":"Basic Styling","text":"<p>Example showing basic text styling:</p> <pre><code>from arabic_animations.core.scene import Scene\nfrom arabic_animations.core.text import Text\nfrom arabic_animations.core.position import Position\nfrom arabic_animations.core.color import Style, Colors\n\n# Create scene\nscene = Scene(width=1920, height=1080)\n\n# Create styled text\ntext = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647\",\n    position=Position.CENTER,\n    style=Style(\n        stroke_color=Colors.BLACK,\n        fill_color=Colors.BLUE,\n        stroke_width=2.0\n    ),\n    write_duration=2.0\n)\n\nscene.add(text)\n</code></pre>"},{"location":"examples/basic/#custom-background","title":"Custom Background","text":"<p>Example showing how to set a custom background color:</p> <pre><code>from arabic_animations.core.scene import Scene\nfrom arabic_animations.core.text import Text\nfrom arabic_animations.core.color import Colors\n\n# Create scene with custom background\nscene = Scene(width=1920, height=1080)\nscene.background_color = Colors.PAPER_CREAM\n\n# Create text\ntext = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647\",\n    write_duration=2.0\n)\n\nscene.add(text)\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to the Getting Started guide for Arabic Text Animator. This section will help you:</p> <ul> <li>Install the package on your system</li> <li>Get started quickly with basic examples</li> </ul> <p>Choose a topic from the navigation menu to begin.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#system-dependencies","title":"System Dependencies","text":""},{"location":"getting-started/installation/#macos","title":"macOS","text":"<pre><code># Install Homebrew if not already installed\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install system dependencies\nbrew install cairo pango pygobject3 pkg-config fontconfig\n</code></pre>"},{"location":"getting-started/installation/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code>sudo apt-get update\nsudo apt-get install -y \\\n    python3-gi \\\n    python3-gi-cairo \\\n    gir1.2-gtk-3.0 \\\n    libcairo2-dev \\\n    pkg-config \\\n    python3-dev \\\n    libgirepository1.0-dev\n</code></pre>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<p>Windows support is currently experimental. We recommend using WSL2 with Ubuntu for the best experience.</p>"},{"location":"getting-started/installation/#python-version-support","title":"Python version support","text":"<p>This package is tested on Python 3.10, 3.11, 3.12 and 3.13. It should work on other versions of Python 3 as well.</p>"},{"location":"getting-started/installation/#python-package-installation","title":"Python Package Installation","text":"<p>Download and install the latest release from pypi or clone the repository and install the package from source.</p>"},{"location":"getting-started/installation/#from-pypi","title":"From PyPI","text":"<pre><code>pip install arabic-text-animator\n</code></pre> <p>Or to choose python 3 explicitly: <pre><code>python3 -m pip install arabic-text-animator\n</code></pre></p> <p>After installation, you can use the <code>arabic-animate</code> command to create animations. For command reference, run <code>arabic-animate --help</code> or check the quickstart guide.</p>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/saqib-ahmed/arabic-text-animator.git\ncd arabic-text-animator\n</code></pre></p> </li> <li> <p>Create and activate a virtual environment (recommended): <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Install the package: <pre><code>pip install -e .\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#font-installation","title":"Font Installation","text":""},{"location":"getting-started/installation/#installing-arabic-fonts","title":"Installing Arabic Fonts","text":"<ol> <li>Download the desired Arabic fonts (e.g., DecoType Thuluth)</li> <li>Double-click the font file to open Font Book (macOS)</li> <li>Click \"Install Font\"</li> </ol> <p>Or manually: - macOS: Copy fonts to <code>~/Library/Fonts/</code> or <code>/Library/Fonts/</code> - Linux: Copy fonts to <code>~/.local/share/fonts/</code> or <code>/usr/local/share/fonts/</code> - Windows: Copy fonts to <code>C:\\Windows\\Fonts\\</code></p> <p>Verify font installation: <pre><code>from arabic_animations.core.text import Text\nText.list_available_fonts()\n</code></pre></p>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":""},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":"<p>Create a new Python script (e.g., <code>my_animation.py</code>):</p> <pre><code>from arabic_animations.core.scene import Scene\nfrom arabic_animations.core.text import Text\nfrom arabic_animations.core.position import Position, Padding\nfrom arabic_animations.core.color import Color, Colors, Style\n\n# Create scene\nscene = Scene(width=1920, height=1080)\n\n# Create text with styling\ntext = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645\",\n    position=Position.TOP,\n    padding=Padding(top=50),\n    style=Style(\n        stroke_color=Color.from_hex(\"#B8860B\"),\n        fill_color=Color.from_hex(\"#FFD700\"),\n        stroke_width=3.0\n    ),\n    write_duration=2.0\n)\n\nscene.add(text)\n</code></pre>"},{"location":"getting-started/quickstart/#command-line-interface","title":"Command Line Interface","text":"<p>The library provides a command-line tool <code>arabic-animate</code> with the following commands:</p> <pre><code># Live preview during development\narabic-animate render my_animation.py --preview\n\n# Enable verbose output for debugging\narabic-animate render my_animation.py --preview -v\n\n# Render to video file\narabic-animate render my_animation.py --output video.mp4\n</code></pre>"},{"location":"getting-started/quickstart/#preview-controls","title":"Preview Controls","text":"<p>When using the preview window: - Space: Play/Pause - R: Reset to beginning - Q: Quit preview</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>Welcome to the User Guide for Arabic Text Animator. This guide covers all the core concepts and features:</p>"},{"location":"user-guide/#core-concepts","title":"Core Concepts","text":"<ul> <li>Positioning - Learn how to position and arrange text elements</li> <li>Styling - Customize the appearance of your text</li> <li>Colors - Work with colors and gradients</li> <li>Animations - Create smooth and beautiful animations</li> </ul> <p>Each section includes detailed explanations and practical examples to help you master Arabic Text Animator.</p>"},{"location":"user-guide/animations/","title":"Animations","text":""},{"location":"user-guide/animations/#basic-animation-concepts","title":"Basic Animation Concepts","text":"<p>The library uses a time-based animation system where each text object has a <code>write_duration</code> that controls how long it takes to write the text.</p>"},{"location":"user-guide/animations/#single-text-animation","title":"Single Text Animation","text":"<pre><code>text = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647\",\n    position=Position.CENTER,\n    write_duration=2.0  # Text will take 2 seconds to write\n)\nscene.add(text)\n</code></pre>"},{"location":"user-guide/animations/#multiple-text-animations","title":"Multiple Text Animations","text":""},{"location":"user-guide/animations/#parallel-animation","title":"Parallel Animation","text":"<p>Text objects animate simultaneously:</p> <pre><code>text1 = Text(\"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647\", write_duration=2.0)\ntext2 = Text(\"\u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645\", write_duration=1.5)\n\n# Both texts will start animating at the same time\nscene.add(text1, text2, serial=False)\n</code></pre>"},{"location":"user-guide/animations/#serial-animation","title":"Serial Animation","text":"<p>Text objects animate one after another:</p> <pre><code>text1 = Text(\"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647\", write_duration=2.0)\ntext2 = Text(\"\u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645\", write_duration=1.5)\n\n# text2 will start after text1 finishes\nscene.add(text1, text2, serial=True)\n</code></pre>"},{"location":"user-guide/animations/#animation-timing","title":"Animation Timing","text":""},{"location":"user-guide/animations/#duration-control","title":"Duration Control","text":"<pre><code># Slow writing animation\ntext = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647\",\n    write_duration=3.0  # 3 seconds\n)\n\n# Quick writing animation\ntext = Text(\n    \"\u0628\u0633\u0645 \u0627\u0644\u0644\u0647\",\n    write_duration=0.5  # Half second\n)\n</code></pre>"},{"location":"user-guide/animations/#preview-and-rendering","title":"Preview and Rendering","text":""},{"location":"user-guide/animations/#live-preview","title":"Live Preview","text":"<p>During development, use the preview window to see your animations:</p> <pre><code>arabic-animate render animation.py --preview\n</code></pre> <p>Preview controls: - Space: Play/Pause - R: Reset animation - Q: Quit preview</p>"},{"location":"user-guide/animations/#final-rendering","title":"Final Rendering","text":"<p>Render the final animation to a video file:</p> <pre><code>arabic-animate render animation.py --output final.mp4\n</code></pre>"},{"location":"user-guide/colors/","title":"Colors and Color Management","text":""},{"location":"user-guide/colors/#color-formats","title":"Color Formats","text":"<p>The <code>Color</code> class supports multiple color formats:</p>"},{"location":"user-guide/colors/#rgb-0-1-range","title":"RGB (0-1 range)","text":"<pre><code>color = Color.from_rgb(1.0, 0.0, 0.0)  # Red\n</code></pre>"},{"location":"user-guide/colors/#rgb-0-255-range","title":"RGB (0-255 range)","text":"<pre><code>color = Color.from_rgb255(255, 0, 0)  # Red\n</code></pre>"},{"location":"user-guide/colors/#hexadecimal","title":"Hexadecimal","text":"<pre><code>color = Color.from_hex(\"#FF0000\")  # Red\ncolor = Color.from_hex(\"#FF0000FF\")  # Red with alpha\n</code></pre>"},{"location":"user-guide/colors/#hsl-hue-saturation-lightness","title":"HSL (Hue, Saturation, Lightness)","text":"<pre><code>color = Color.from_hsl(0, 1.0, 0.5)  # Red\n</code></pre>"},{"location":"user-guide/colors/#hsv-hue-saturation-value","title":"HSV (Hue, Saturation, Value)","text":"<pre><code>color = Color.from_hsv(0, 1.0, 1.0)  # Red\n</code></pre>"},{"location":"user-guide/colors/#predefined-colors","title":"Predefined Colors","text":""},{"location":"user-guide/colors/#basic-colors","title":"Basic Colors","text":"<pre><code>Colors.WHITE\nColors.BLACK\nColors.RED\nColors.GREEN\nColors.BLUE\n</code></pre>"},{"location":"user-guide/colors/#extended-colors","title":"Extended Colors","text":"<pre><code>Colors.TRANSPARENT\nColors.GRAY\nColors.YELLOW\nColors.CYAN\nColors.MAGENTA\n</code></pre>"},{"location":"user-guide/colors/#ui-colors","title":"UI Colors","text":"<pre><code>Colors.PRIMARY\nColors.SECONDARY\nColors.SUCCESS\nColors.WARNING\nColors.DANGER\n</code></pre>"},{"location":"user-guide/colors/#paper-colors","title":"Paper Colors","text":"<pre><code>Colors.PAPER_WHITE\nColors.PAPER_CREAM\nColors.PAPER_SEPIA\n</code></pre>"},{"location":"user-guide/colors/#color-manipulation","title":"Color Manipulation","text":""},{"location":"user-guide/colors/#alpha-channel","title":"Alpha Channel","text":"<pre><code>semi_transparent = color.with_alpha(0.5)\n</code></pre>"},{"location":"user-guide/colors/#lightness","title":"Lightness","text":"<pre><code>lighter = color.lighten(0.2)\ndarker = color.darken(0.2)\n</code></pre>"},{"location":"user-guide/colors/#converting-between-formats","title":"Converting Between Formats","text":"<pre><code>color = Color.from_hex(\"#FF0000\")\n\n# Get different formats\nrgb = color.to_rgb()  # (1.0, 0.0, 0.0, 1.0)\nrgb255 = color.to_rgb255()  # (255, 0, 0, 1.0)\nhex_str = color.to_hex()  # \"#FF0000\"\nhsl = color.to_hsl()  # (0.0, 1.0, 0.5, 1.0)\nhsv = color.to_hsv()  # (0.0, 1.0, 1.0, 1.0)\n</code></pre>"},{"location":"user-guide/positioning/","title":"Positioning System","text":"<p>The Arabic Animations library provides a flexible positioning system for placing text elements on the screen.</p>"},{"location":"user-guide/positioning/#position-types","title":"Position Types","text":"<p>The following position types are available through the <code>Position</code> enum:</p> <ul> <li><code>Position.TOP</code>: Center-aligned at the top</li> <li><code>Position.BOTTOM</code>: Center-aligned at the bottom</li> <li><code>Position.LEFT</code>: Left-aligned at vertical center</li> <li><code>Position.RIGHT</code>: Right-aligned at vertical center</li> <li><code>Position.CENTER</code>: Centered both horizontally and vertically</li> <li><code>Position.TOP_LEFT</code>: Aligned to top-left corner</li> <li><code>Position.TOP_RIGHT</code>: Aligned to top-right corner</li> <li><code>Position.BOTTOM_LEFT</code>: Aligned to bottom-left corner</li> <li><code>Position.BOTTOM_RIGHT</code>: Aligned to bottom-right corner</li> </ul>"},{"location":"user-guide/positioning/#padding","title":"Padding","text":"<p>The <code>Padding</code> class allows you to add space around text elements:</p> <pre><code># Add padding to all sides\npadding = Padding.all(20)\n\n# Add horizontal padding only\npadding = Padding.horizontal(50)\n\n# Add vertical padding only\npadding = Padding.vertical(30)\n\n# Custom padding for each side\npadding = Padding(top=20, right=40, bottom=20, left=40)\n</code></pre>"},{"location":"user-guide/positioning/#examples","title":"Examples","text":""},{"location":"user-guide/positioning/#basic-positioning","title":"Basic Positioning","text":"<pre><code>text = Text(\n    \"Hello\",\n    position=Position.TOP,\n    padding=Padding(top=50)\n)\n</code></pre>"},{"location":"user-guide/positioning/#complex-layout","title":"Complex Layout","text":"<pre><code>title = Text(\n    \"Main Title\",\n    position=Position.TOP,\n    padding=Padding(top=50)\n)\n\nsubtitle = Text(\n    \"Subtitle\",\n    position=Position.CENTER\n)\n\nfooter = Text(\n    \"Footer\",\n    position=Position.BOTTOM,\n    padding=Padding(bottom=30)\n)\n</code></pre>"},{"location":"user-guide/styling/","title":"Styling Text","text":"<p>The Arabic Animations library provides comprehensive styling options through the <code>Style</code> class.</p>"},{"location":"user-guide/styling/#basic-styling","title":"Basic Styling","text":"<pre><code>from arabic_animations.core.color import Style, Color, Colors\n\n# Basic black stroke\nstyle = Style(\n    stroke_color=Colors.BLACK,\n    stroke_width=2.0\n)\n\n# Filled text\nstyle = Style(\n    stroke_color=Colors.BLACK,\n    fill_color=Colors.BLUE,\n    stroke_width=2.0\n)\n</code></pre>"},{"location":"user-guide/styling/#effects","title":"Effects","text":""},{"location":"user-guide/styling/#shadows","title":"Shadows","text":"<pre><code>style = Style(\n    stroke_color=Colors.BLACK,\n    shadow_color=Color.from_hex(\"#00000066\"),  # Semi-transparent black\n    shadow_offset=(5, 5),\n    shadow_blur=2.0\n)\n</code></pre>"},{"location":"user-guide/styling/#glow","title":"Glow","text":"<pre><code>style = Style(\n    stroke_color=Colors.BLUE,\n    glow_color=Color.from_hex(\"#FFFFFF99\"),\n    glow_radius=3.0\n)\n</code></pre>"},{"location":"user-guide/styling/#gradients","title":"Gradients","text":"<pre><code>style = Style(\n    stroke_color=Colors.PRIMARY,\n    gradient=(Colors.PRIMARY, Colors.SECONDARY),\n    gradient_direction=(0, 50)  # Vertical gradient over 50 pixels\n)\n</code></pre>"},{"location":"user-guide/styling/#predefined-styles","title":"Predefined Styles","text":""},{"location":"user-guide/styling/#golden-title","title":"Golden Title","text":"<pre><code>title_style = Style(\n    stroke_color=Color.from_hex(\"#B8860B\"),\n    fill_color=Color.from_hex(\"#FFD700\"),\n    stroke_width=3.0,\n    shadow_color=Color.from_hex(\"#00000066\"),\n    shadow_offset=(5, 5)\n)\n</code></pre>"},{"location":"user-guide/styling/#neon-text","title":"Neon Text","text":"<pre><code>neon_style = Style(\n    stroke_color=Colors.CYAN,\n    glow_color=Colors.CYAN.with_alpha(0.6),\n    glow_radius=5.0,\n    stroke_width=2.0\n)\n</code></pre>"}]}